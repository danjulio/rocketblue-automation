<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2015r2.3" FormatVersion="2" MinIDEVersion="20070100">
<block type="Module" ID="1939673543">
 <ObjName>Option</ObjName>
 <ObjContainerID>1881215597</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(shortKey As String, longKey As String, description As String, type As OptionType = OptionType.String)</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Construct a new `Option` for use with `OptionParser`. Provides most</SourceLine>
   <SourceLine>// common attributes about an option as parameters. </SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// ### Parameters</SourceLine>
   <SourceLine>// * `shortKey` - Option's short key, can be blank</SourceLine>
   <SourceLine>// * `longKey` - Option's long key, can be blank</SourceLine>
   <SourceLine>// * `description` - Description of option used when display the help message</SourceLine>
   <SourceLine>// * `type` - Type of this option, see `OptionType` enum</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// ### Notes</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// While both `shortKey` and `longKey` are optional, one must be supplied. Further,</SourceLine>
   <SourceLine>// `longKey` must be more than 1 character in length.</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// ### Example</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// ```</SourceLine>
   <SourceLine>// Dim opt As New OptionParser</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Dim o As Option</SourceLine>
   <SourceLine>// o = New Option("", "name", "Name to say hello to")</SourceLine>
   <SourceLine>// o.IsRequired = True</SourceLine>
   <SourceLine>// opt.AddOption o</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// opt.AddOption New Option("", "count", "Number of times to say hello", Option.OptionType.Integer)</SourceLine>
   <SourceLine>// ```</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Validate and cleanup</SourceLine>
   <SourceLine>shortKey = shortKey.Trim</SourceLine>
   <SourceLine>longKey = longKey.Trim</SourceLine>
   <SourceLine>description = ReplaceLineEndings(description.Trim, EndOfLine)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>While shortKey.Left(1) = "-"</SourceLine>
   <SourceLine>shortKey = shortKey.Mid(2).Trim</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>While longKey.Left(1) = "-"</SourceLine>
   <SourceLine>longKey = longKey.Mid(2).Trim</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If shortKey = "" and longKey = "" Then</SourceLine>
   <SourceLine>Raise New OptionParserException("Option must specify at least one key.")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If shortKey.Len &gt; 1 Then</SourceLine>
   <SourceLine>Raise New OptionParserException("Short Key is optional but may only be one character: " + shortKey)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If longKey.Len = 1 Then</SourceLine>
   <SourceLine>Raise New OptionParserException("Long Key is optional but must be more than one character: " + longKey)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Self.ShortKey = shortKey</SourceLine>
   <SourceLine>Self.LongKey = longKey</SourceLine>
   <SourceLine>Self.Description = description</SourceLine>
   <SourceLine>Self.Type = type</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>shortKey As String, longKey As String, description As String, type As OptionType = OptionType.String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HandleValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HandleValue(value As String)</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// For internal `OptionParser` use.</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Handles converting the `String` representation of an option as supplied</SourceLine>
   <SourceLine>// by the user to the actual `OptionType`, for example, converts a `String`</SourceLine>
   <SourceLine>// to an `Integer`, `Double`, `Date`, `Boolean`, `FolderItem`, etc...</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Check to see if the value is allowed or disallowed first</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>if AllowedValues.Ubound &lt;&gt; -1 and AllowedValues.IndexOf(value) = -1 then</SourceLine>
   <SourceLine>raise new OptionInvalidKeyValueException("The key value is not allowed: " + value)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>if DisallowedValues.Ubound &lt;&gt; -1 and DisallowedValues.IndexOf(value) &lt;&gt; -1 then</SourceLine>
   <SourceLine>raise new OptionInvalidKeyValueException("The key value is dissallowed: " + value)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim newValue As Variant</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Select Case Type</SourceLine>
   <SourceLine>Case OptionType.Boolean</SourceLine>
   <SourceLine>Select Case value</SourceLine>
   <SourceLine>Case "", "y", "yes", "t", "true", "on", "1"</SourceLine>
   <SourceLine>newValue = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>newValue = False</SourceLine>
   <SourceLine>End Select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case OptionType.Date</SourceLine>
   <SourceLine>Dim dValue As Date</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If ParseDate(value, dValue) Then</SourceLine>
   <SourceLine>newValue = dValue</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>newValue = value</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case OptionType.Directory</SourceLine>
   <SourceLine>if value &lt;&gt; "" then</SourceLine>
   <SourceLine>newValue = OptionParser.GetRelativeFolderItem(value)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case OptionType.Double</SourceLine>
   <SourceLine>newValue = Val(value)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case OptionType.File</SourceLine>
   <SourceLine>if value &lt;&gt; "" then</SourceLine>
   <SourceLine>newValue = OptionParser.GetRelativeFolderItem(value)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case OptionType.Integer</SourceLine>
   <SourceLine>newValue = Val(value)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case OptionType.String</SourceLine>
   <SourceLine>newValue = value</SourceLine>
   <SourceLine>End Select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Self.IsArray Then</SourceLine>
   <SourceLine>If Not Self.WasSet Then</SourceLine>
   <SourceLine>Self.Value = Array(newValue)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Dim ary() As Variant = Self.Value</SourceLine>
   <SourceLine>ary.Append newValue</SourceLine>
   <SourceLine>Self.Value = ary</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Self.Value = newValue</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Self.WasSet = True</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>value As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>AddAllowedValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AddAllowedValue(ParamArray values() As String)</SourceLine>
   <SourceLine>if AllowedValues.Ubound &lt;&gt; -1 then</SourceLine>
   <SourceLine>raise new OptionParserException("You cannot set both allowed values and disallowed values")</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each v as string in values</SourceLine>
   <SourceLine>AllowedValues.Append v.Trim</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ParamArray values() As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>AddDisallowedValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AddDisallowedValue(ParamArray values() As String)</SourceLine>
   <SourceLine>if AllowedValues.Ubound &lt;&gt; -1 then</SourceLine>
   <SourceLine>raise new OptionParserException("You cannot set both disallowed values and allowed values")</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each v as string in values</SourceLine>
   <SourceLine>DisallowedValues.Append v.Trim</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ParamArray values() As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Note>
  <ItemName>Enums</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>Enums</NoteLine>
   <NoteLine>### OptionType</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Represent a valid type of option.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>* `String`</NoteLine>
   <NoteLine>* `Integer` - Supplied value must be a valid number</NoteLine>
   <NoteLine>* `Double` - Supplied value must be a valid number</NoteLine>
   <NoteLine>* `Date` - Supplied value must pass `ParseDate()`</NoteLine>
   <NoteLine>* `Boolean` - If supplied value is `""`, `"y"`, `"yes"`, `"t"`, `"true"`, `"on"`, `"1"` then it is considered `True`, otherwise `False`</NoteLine>
   <NoteLine>* `File` - Represented by a `FolderItem`</NoteLine>
   <NoteLine>* `Directory` - Represented by a `FolderItem`</NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>Description</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Description As String</SourceLine>
   <SourceLine>Description that will appear in the application help for this option.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Description As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>IsArray</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>IsArray As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For example, say this option has `IsArray=True` and is `-i/--include`. On the command line one could:</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>```</SourceLine>
   <SourceLine>$ myapp -i include -i project/include -i support/include abc.c</SourceLine>
   <SourceLine>```</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>In code would look like:</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>```</SourceLine>
   <SourceLine>Dim v() As Variant = optParser.ArrayValue("include")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Print v(0) // include</SourceLine>
   <SourceLine>Print v(1) // project/include</SourceLine>
   <SourceLine>Print v(2) // support/include</SourceLine>
   <SourceLine>```</SourceLine>
   <SourceLine>If True, this option will handle multiple values and store those values into an array, even if one or none.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>IsArray As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>IsReadableRequired</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>IsReadableRequired As Boolean</SourceLine>
   <SourceLine>When set to `True` validation will be done on a `OptionType.File` and `OptionType.Folder`</SourceLine>
   <SourceLine>to ensure that it can be read from. If the validation fails a `OptionInvalidKeyValueException`</SourceLine>
   <SourceLine>exception will be raised.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>**NOTE:** This does not mean that the option is required. It simply means that if supplied, the</SourceLine>
   <SourceLine>option needs to be readable. If you want to make sure that the option is both readable and</SourceLine>
   <SourceLine>required, one should also set `IsRequired=True`.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>IsReadableRequired As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>IsRequired</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>IsRequired As Boolean</SourceLine>
   <SourceLine>If set to `True`, this option will be required to be supplied at the command line. If it is not</SourceLine>
   <SourceLine>supplied, a `OptionMissingKeyException` will be raised.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>IsRequired As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>IsValid</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>IsValid As Boolean</SourceLine>
   <SourceLine>Read-only property that one can check to ensure if the Option value is valid</SourceLine>
   <SourceLine>or not.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>IsValid As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>If IsRequired And Not WasSet Then</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If IsRequired Or WasSet Then</SourceLine>
   <SourceLine>Select Case Type</SourceLine>
   <SourceLine>Case OptionType.Date</SourceLine>
   <SourceLine>If IsValidDateRequired Then</SourceLine>
   <SourceLine>Dim d As Date = Value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If d Is Nil Then</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case OptionType.Directory, OptionType.File</SourceLine>
   <SourceLine>Dim fi As FolderItem = Value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If IsRequired Or WasSet Then</SourceLine>
   <SourceLine>If IsReadableRequired And (fi Is Nil Or fi.IsReadable = False) Then</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If IsWriteableRequired And (fi Is Nil Or fi.IsWriteable = False) Then</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case OptionType.Double, OptionType.Integer</SourceLine>
   <SourceLine>Dim d As Double = Value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If MinimumNumber &lt;&gt; kNumberNotSet And d &lt; MinimumNumber Then</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If MaximumNumber &lt;&gt; kNumberNotSet And d &gt; MaximumNumber Then</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Select</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>IsValidDateRequired</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>IsValidDateRequired As Boolean</SourceLine>
   <SourceLine>When set to `True` validation is performed on the supplied value to make sure it is a valid</SourceLine>
   <SourceLine>date. If the validation fails a `OptionInvalidKeyValueException` exception will be raised.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>**NOTE:** This does not mean that the option is required. It simply means that if supplied, the</SourceLine>
   <SourceLine>option needs to be a valid date. If you want to make sure that the option is both a readable </SourceLine>
   <SourceLine>date and required, one should also set `IsRequired=True`.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>IsValidDateRequired As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>IsWriteableRequired</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>IsWriteableRequired As Boolean</SourceLine>
   <SourceLine>When set to `True` validation will be done on a `OptionType.File` and `OptionType.Folder`</SourceLine>
   <SourceLine>to ensure that it can be written to. If the validation fails a `OptionInvalidKeyValueException`</SourceLine>
   <SourceLine>exception will be raised.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>**NOTE:** This does not mean that the option is required. It simply means that if supplied, the</SourceLine>
   <SourceLine>option needs to be writeable. If you want to make sure that the option is both writeable and</SourceLine>
   <SourceLine>required, one should also set `IsRequired=True`.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>IsWriteableRequired As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>LongKey</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>LongKey As String</SourceLine>
   <SourceLine>An option can have a short and long key. This is the long key. A key is what the user</SourceLine>
   <SourceLine>supplies on the command line to supply a particular value to a given option.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For example, suppose you are writing a Hello World program and wish to accept a name</SourceLine>
   <SourceLine>on the command line of who to say hello to. The long option name be "name" while the</SourceLine>
   <SourceLine>short "n".</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>```</SourceLine>
   <SourceLine>$ say-hello -n John</SourceLine>
   <SourceLine>Hello John!</SourceLine>
   <SourceLine>$ say-hello --name=John</SourceLine>
   <SourceLine>Hello John!</SourceLine>
   <SourceLine>```</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>LongKey As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>MaximumNumber</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>MaximumNumber As Double</SourceLine>
   <SourceLine>Set a maximum limit to an `Integer` or `Double` option type.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>**NOTE:** This does not mean that the option is required. It simply means that if supplied, the</SourceLine>
   <SourceLine>option needs to be no more than this. If you want to make sure that the option has a maximum value</SourceLine>
   <SourceLine>and is required, one should also set `IsRequired=True`.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>MaximumNumber As Double = kNumberNotSet</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>MinimumNumber</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>MinimumNumber As Double</SourceLine>
   <SourceLine>Set a minimum limit to an `Integer` or `Double` option type.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>**NOTE:** This does not mean that the option is required. It simply means that if supplied, the</SourceLine>
   <SourceLine>option needs to be no less than this. If you want to make sure that the option has a minimum value</SourceLine>
   <SourceLine>and is required, one should also set `IsRequired=True`.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>MinimumNumber As Double = kNumberNotSet</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>ShortKey</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ShortKey As String</SourceLine>
   <SourceLine>An option can have a short and long key. This is the short key. A key is what the user</SourceLine>
   <SourceLine>supplies on the command line to supply a particular value to a given option.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For example, suppose you are writing a Hello World program and wish to accept a name</SourceLine>
   <SourceLine>on the command line of who to say hello to. The long option name be "name" while the</SourceLine>
   <SourceLine>short "n".</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>```</SourceLine>
   <SourceLine>$ say-hello -n John</SourceLine>
   <SourceLine>Hello John!</SourceLine>
   <SourceLine>$ say-hello --name=John</SourceLine>
   <SourceLine>Hello John!</SourceLine>
   <SourceLine>```</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ShortKey As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Type</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Type As OptionType</SourceLine>
   <SourceLine>Get or Set what type of option this is.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Please see the `OptionType` enum for more information.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Type As OptionType</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>TypeString</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TypeString As String</SourceLine>
   <SourceLine>Retrieve a `String` representation of the enum `OptionType` associated with this option.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TypeString As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Select Case Type</SourceLine>
   <SourceLine>Case OptionType.Boolean</SourceLine>
   <SourceLine>Return "BOOL"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case OptionType.Date</SourceLine>
   <SourceLine>Return "DATE"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case OptionType.Directory</SourceLine>
   <SourceLine>Return "DIR"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case OptionType.Double</SourceLine>
   <SourceLine>Return "DOUBLE"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case OptionType.File</SourceLine>
   <SourceLine>Return "FILE"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case OptionType.Integer</SourceLine>
   <SourceLine>Return "INTEGER"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case OptionType.String</SourceLine>
   <SourceLine>Return "STR"</SourceLine>
   <SourceLine>End Select</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Value</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Value As Variant</SourceLine>
   <SourceLine>Get or set the user supplied value of this option.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Value As Variant</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>WasSet</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>WasSet As Boolean</SourceLine>
   <SourceLine>If the option was supplied on the command line, `WasSet` will return True. Otherwise</SourceLine>
   <SourceLine>it will return `False`. This can be used to determine if a default value should be</SourceLine>
   <SourceLine>used or maybe further user prompting.</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>WasSet As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>AllowedValues()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AllowedValues() As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AllowedValues() As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>DisallowedValues()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DisallowedValues() As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DisallowedValues() As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>HelpDescription</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>HelpDescription As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>HelpDescription As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>dim desc() as string = Array(Description)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if AllowedValues.Ubound &lt;&gt; -1 then</SourceLine>
   <SourceLine>dim chunk as string = "[can be: `" + join(AllowedValues, "', `") + "']"</SourceLine>
   <SourceLine>desc.Append chunk</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if DisallowedValues.Ubound &lt;&gt; -1 then</SourceLine>
   <SourceLine>dim chunk as string = "[may not be: `" + join(DisallowedValues, "', `") + "']"</SourceLine>
   <SourceLine>desc.Append chunk</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return join(desc, " ")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Description</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IsReadableRequired</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IsRequired</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IsValid</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IsValidDateRequired</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IsWriteableRequired</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LongKey</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaximumNumber</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>kNumberNotSet</PropertyValue>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinimumNumber</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>kNumberNotSet</PropertyValue>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ShortKey</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TypeString</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>WasSet</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IsArray</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Type</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>OptionType</ItemType>
   <EditorType>Enum</EditorType>
   <Enumeration>
    <ItemDef>0 - String</ItemDef>
    <ItemDef>1 - Integer</ItemDef>
    <ItemDef>2 - Double</ItemDef>
    <ItemDef>3 - Date</ItemDef>
    <ItemDef>4 - Boolean</ItemDef>
    <ItemDef>5 - File</ItemDef>
    <ItemDef>6 - Directory</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HelpDescription</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>kNone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>0</ItemType>
  <ItemDef></ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kNumberNotSet</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>-32768</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Enumeration>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>OptionType</ItemName>
  <ItemFlags>0</ItemFlags>
  <ItemType>Integer</ItemType>
  <ItemName>OptionType</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>String</SourceLine>
   <SourceLine>Integer</SourceLine>
   <SourceLine>Double</SourceLine>
   <SourceLine>Date</SourceLine>
   <SourceLine>Boolean</SourceLine>
   <SourceLine>File</SourceLine>
   <SourceLine>Directory</SourceLine>
  </ItemSource>
 </Enumeration>
</block>
</RBProject>
